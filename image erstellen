Referenz Installation (siehe dietPi.com) anschlieÃŸend von der SD-Karte kopieren. 
- $lsblk # dev ermitteln
#/dev/sdg

- $cat /dev/sdg > /home/IOSs/dietPi-hole.img status=progress
#60 GB file

shrinking .img file

Let's enable enable the loopback:
sudo modprobe loop

Let's request a new (free) loopback device:
sudo losetup -f

The command returns the path to a free loopback device:
/dev/loop0

Let's create a device of the image:
sudo losetup /dev/loop0 myimage.img

The device /dev/loop0 represents myimage.img. We want to access the partitions that are on the image, so we need to ask the kernel to load those too:
sudo partprobe /dev/loop0
$lsblk | grep loop
This should give us the device /dev/loop0p1 and /dev/loopp2, which represents partition in myimage.img. We do not need this device directly, but parted requires it.

root@cloud:/home/ISOs# parted /dev/loop0
GNU Parted 3.4
Using /dev/loop0
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) print                                                            
Model: Loopback device (loopback)
Disk /dev/loop0: 63.9GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos
Disk Flags: 

Number  Start   End     Size    Type     File system  Flags
 1      4194kB  138MB   134MB   primary  fat32        boot, lba
 2      138MB   63.9GB  63.7GB  primary  ext4

(parted) resizepart                                                       
Partition number? 2                                                       
End?  [63.9GB]? 8000                                                      
Warning: Shrinking a partition can cause data loss, are you sure you want to
continue?
Yes/No? Yes                                                               
(parted)      quit

Now we don't need the loopback-device anymore, so unload it:

root@cloud:/home/ISOs# losetup -d /dev/loop0

Shaving the image:

Now that we have all the important data at the beginning of the image it is time to shave off that unallocated part. We will first need to know where our partition ends and where the unallocated part begins. We do this using fdisk:

fdisk -l myimage.img
Here we will see an output similar to the following:

Disk myimage.img: 6144 MB, 6144000000 bytes, 12000000 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x000ea37d

      Device Boot      Start         End      Blocks   Id  System
myimage.img1            2048     9181183     4589568    b  W95 FAT32
Note two things in the output:

The partition ends on block 9181183 (shown under End)
The block-size is 512 bytes (shown as sectors of 1 * 512)
We will use these numbers in the rest of the example. The block-size (512) is often the same, but the ending block (9181183) will differ for you. The numbers mean that the partition ends on byte 9181183512 of the file. After that byte comes the unallocated-part. Only the first 9181183512 bytes will be useful for our image.

Next we shrink the image-file to a size that can just contain the partition. For this we will use the truncate command (thanks uggla!). With the truncate command need to supply the size of the file in bytes. The last block was 9181183 and block-numbers start at 0. That means we need (9181183+1)*512 bytes. This is important, else the partition will not fit the image. So now we use truncate with the calculations:

truncate --size=$[(9181183+1)*512] myimage.img
